¬°Excelente, vamos a practicar! üöÄ
Entonces aqui tenemos una **lista de 50 ejercicios con Northwind**, organizados en **bloques tem√°ticos**.
Cada bloque tendr√°:

* Una **explicaci√≥n te√≥rica corta** del concepto.
* Un **mini ejemplo ilustrativo** (general, no resuelto con Northwind).
* Una **serie de ejercicios** que van de lo m√°s simple a lo m√°s complejo.

De esta forma no solo tienes pr√°ctica, sino tambi√©n una gu√≠a de aprendizaje progresiva üìö.

---

# üìò 50 Ejercicios SQL con Northwind

---

## **A ‚Äì Consultas simples (SELECT, columnas y alias)**

üëâ *Teor√≠a*: La sentencia `SELECT` permite recuperar datos de una tabla. Podemos elegir columnas espec√≠ficas, usar alias para renombrarlas y concatenar valores.
üëâ *Ejemplo*:

```sql
SELECT FirstName + ' ' + LastName AS NombreCompleto FROM Empleados;
```

**Ejercicios**

1. Recuperar lista de empleados (nombre y apellido).
2. Recuperar id, apellido y fecha de contrataci√≥n de los empleados.
3. Recuperar id, nombre completo concatenado y t√≠tulo de cada empleado.
4. Recuperar lista de clientes (id y nombre de la compa√±√≠a).
5. Recuperar productos con sus precios unitarios, ordenados por precio descendente.

---

## **B ‚Äì Filtros y condiciones (WHERE, BETWEEN, IN, LIKE)**

üëâ *Teor√≠a*: La cl√°usula `WHERE` permite filtrar registros.

* `=` para igualdad
* `BETWEEN` para rangos
* `IN` para listas de valores
* `LIKE` para patrones de texto
  üëâ *Ejemplo*:

```sql
SELECT * FROM Productos WHERE Precio BETWEEN 10 AND 20;
```

**Ejercicios**
6\. Recuperar productos cuyo precio sea mayor a 50.
7\. Recuperar pedidos hechos en el a√±o 1997.
8\. Recuperar empleados cuyo pa√≠s sea ‚ÄúUSA‚Äù.
9\. Recuperar productos con stock entre 10 y 50 unidades.
10\. Recuperar clientes de pa√≠ses espec√≠ficos (M√©xico, Argentina, Brasil).
11\. Recuperar empleados cuyo apellido empiece con ‚ÄúD‚Äù.

---

## **C ‚Äì Ordenamiento (ORDER BY)**

üëâ *Teor√≠a*: `ORDER BY` organiza los resultados en forma ascendente (ASC) o descendente (DESC).
üëâ *Ejemplo*:

```sql
SELECT Nombre, Precio FROM Productos ORDER BY Precio DESC;
```

**Ejercicios**
12\. Recuperar productos ordenados por categor√≠a y luego por precio.
13\. Recuperar empleados ordenados por fecha de contrataci√≥n (m√°s antiguos primero).
14\. Recuperar empleados ordenados por pa√≠s ascendente y ciudad descendente.

---

## **D ‚Äì Consultas con m√∫ltiples tablas (JOINs)**

üëâ *Teor√≠a*:

* `INNER JOIN`: trae coincidencias en ambas tablas.
* `LEFT JOIN`: trae todos los registros de la izquierda y los que coincidan de la derecha.
* `RIGHT JOIN`: al rev√©s del anterior.
  üëâ *Ejemplo*:

```sql
SELECT p.Nombre, c.NombreCategoria
FROM Productos p
JOIN Categorias c ON p.CategoriaID = c.ID;
```

**Ejercicios**
15\. Recuperar lista de pedidos con nombre del cliente asociado.
16\. Recuperar lista de productos junto con su categor√≠a.
17\. Recuperar lista de pedidos junto con el nombre completo del empleado que lo gestion√≥.
18\. Recuperar lista de productos y su proveedor.
19\. Recuperar lista de pedidos con cliente, empleado y transportista.
20\. Recuperar lista de categor√≠as con la cantidad de productos que tiene cada una.

---

## **E ‚Äì Funciones de agregaci√≥n (MAX, MIN, SUM, AVG, COUNT)**

üëâ *Teor√≠a*: Estas funciones resumen datos.
üëâ *Ejemplo*:

```sql
SELECT AVG(Salario) AS Promedio FROM Empleados;
```

**Ejercicios**
21\. Recuperar el precio m√°ximo de los productos.
22\. Recuperar el precio promedio de los productos de la categor√≠a ‚ÄúBeverages‚Äù.
23\. Recuperar el total de pedidos realizados por cada cliente.
24\. Recuperar los 5 productos m√°s caros.
25\. Recuperar clientes que han realizado m√°s de 10 pedidos.
26\. Recuperar el total de ingresos por cada producto (cantidad \* precio unitario).

---

## **F ‚Äì Subconsultas**

üëâ *Teor√≠a*: Una subconsulta es una consulta dentro de otra (`SELECT ... WHERE columna > (SELECT ...)`).
üëâ *Ejemplo*:

```sql
SELECT Nombre FROM Productos WHERE Precio > (SELECT AVG(Precio) FROM Productos);
```

**Ejercicios**
27\. Recuperar productos cuyo precio sea mayor al promedio de todos los productos.
28\. Recuperar pedidos realizados por el cliente con m√°s pedidos.
29\. Recuperar empleados que trabajan en la misma ciudad que ‚ÄúAndrew Fuller‚Äù.
30\. Recuperar proveedores que proveen productos m√°s caros que el promedio.

---

## **G ‚Äì Agrupamientos y HAVING**

üëâ *Teor√≠a*: `GROUP BY` agrupa registros; `HAVING` filtra resultados agrupados.
üëâ *Ejemplo*:

```sql
SELECT CategoriaID, AVG(Precio) 
FROM Productos 
GROUP BY CategoriaID 
HAVING AVG(Precio) > 30;
```

**Ejercicios**
31\. Obtener la cantidad de pedidos por cada a√±o.
32\. Obtener el promedio de precios por categor√≠a.
33\. Obtener los clientes con m√°s de 20 pedidos.
34\. Obtener las categor√≠as cuyo precio promedio de producto sea mayor a 40.
35\. Obtener el total de ventas (cantidad \* precio) por a√±o.

---

## **H ‚Äì Funciones de fecha y texto**

üëâ *Teor√≠a*:

* `YEAR()`, `MONTH()`, `DAY()` extraen partes de fechas.
* Funciones de texto como `LEN()`, `SUBSTRING()` manipulan cadenas.
  üëâ *Ejemplo*:

```sql
SELECT YEAR(FechaPedido) AS A√±o, COUNT(*) FROM Pedidos GROUP BY YEAR(FechaPedido);
```

**Ejercicios**
36\. Obtener los pedidos agrupados por mes y a√±o.
37\. Obtener el n√∫mero de empleados contratados por d√©cada.
38\. Obtener los clientes cuyo nombre de compa√±√≠a tenga m√°s de 20 caracteres.
39\. Obtener los tres primeros caracteres del apellido de cada empleado.

---

## **I ‚Äì Modificaci√≥n de datos (INSERT, UPDATE, DELETE)**

üëâ *Teor√≠a*:

* `INSERT`: agrega registros.
* `UPDATE`: modifica registros existentes.
* `DELETE`: elimina registros.
  üëâ *Ejemplo*:

```sql
INSERT INTO Clientes (ID, Nombre) VALUES ('C123','Cliente Demo');
```

**Ejercicios**
40\. Insertar un nuevo cliente ficticio.
41\. Actualizar el tel√©fono de un proveedor espec√≠fico.
42\. Eliminar un transportista ficticio.
43\. Aumentar en 10% el precio de todos los productos de la categor√≠a ‚ÄúSeafood‚Äù.
44\. Eliminar todos los pedidos de un cliente ficticio.

---

## **J ‚Äì Objetos de base de datos (Vistas, Funciones, Procedimientos, Triggers)**

üëâ *Teor√≠a*:

* **Vista**: consulta almacenada que se puede reutilizar.
* **Funci√≥n**: l√≥gica que devuelve un valor.
* **Procedimiento almacenado**: l√≥gica que ejecuta acciones.
* **Trigger**: acci√≥n autom√°tica cuando ocurre un evento (`INSERT`, `UPDATE`, `DELETE`).

üëâ *Ejemplo Vista*:

```sql
CREATE VIEW vw_ProductosCategorias AS
SELECT p.Nombre, c.NombreCategoria FROM Productos p JOIN Categorias c ON p.CategoriaID = c.ID;
```

**Ejercicios**
45\. Crear una vista con los productos y el nombre de su categor√≠a.
46\. Crear una vista con los pedidos y el nombre del cliente.
47\. Crear una funci√≥n que retorne la antig√ºedad en a√±os de un empleado dado su EmployeeID.
48\. Crear un procedimiento que retorne los clientes ordenados por la cantidad de pedidos.
49\. Crear un trigger que actualice autom√°ticamente el stock de un producto despu√©s de insertar un pedido.
50\. Crear un trigger que registre en una tabla de auditor√≠a cada vez que se elimine un pedido.

---

‚úÖ listo? lo hemos logrado, felicidades, vamos a buscarnos otro reto.

